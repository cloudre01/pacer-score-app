AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets to launch instances into
  ServiceName:
    Type: String
    Default: MyService
  ContainerPort:
    Type: Number
    Default: 8000
  LoadBalancerPort:
    Type: Number
    Default: 80
  Image:
    Type: String
    Default: 123456789012.dkr.ecr.region.amazonaws.com/image:tag
  MinContainers:
    Type: Number
    Default: 1
  MaxContainers:
    Type: Number
    Default: 10
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  TaskRole:
    Type: String
    Description: The IAM role that the ECS service will use to run tasks
  ExecutionRole:
    Type: String
    Description: The IAM role that the ECS service will use to pull images from ECR
  AutoScalingRoleArn:
    Type: String
    Description: The IAM role that the ECS service will use to autoscale
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for the container
  TargetGroup:
    Type: String
    Description: Target group for the load balancer
  PostgresEndpoint:
    Type: String
    Description: The endpoint of the postgres database

Resources:
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join [ '', [ !Ref ServiceName, Cluster ] ]
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Join [ '', [ !Ref ServiceName, TaskDefinition ] ]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: DB_HOST
              Value: !Ref PostgresEndpoint
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      DesiredCount: !Ref MinContainers
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
#        HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            Ref: PrivateSubnets
          AssignPublicIp: ENABLED
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ /ecs/, !Ref ServiceName, TaskDefinition ] ]
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join [ '/', [ service, !Ref Cluster, !GetAtt Service.Name ] ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Ref AutoScalingRoleArn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join [ '', [ !Ref ServiceName, AutoScalingPolicy ] ]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue

Outputs:
    ServiceName:
        Description: The name of the service
        Value: !Ref ServiceName
    ClusterName:
        Description: The name of the cluster
        Value: !Ref Cluster
